---
- block:
  - name: Create {{ nexus_docker_compose_location }}
    file:
      path: "{{ nexus_docker_compose_location }}"
      state: directory

  - name: Template and copy over the docker-compose file
    template:
      src: "{{ nexus_docker_compose_template }}"
      dest: "{{ nexus_docker_compose_location }}/{{ nexus_docker_compose_file_name }}"
      owner: root
      group: root
      mode: 0644

  - name: Make up server alias parameters string
    set_fact:
       aliases: "{{ nexus_server_alias.split() | join(' -d ') }}"
    when: nexus_server_alias

  - name: Update server aliases in certbot command in the docker-compose file
    replace:
      path: "{{ nexus_docker_compose_location }}/{{ nexus_docker_compose_file_name }}"
      regexp: '(^\s*command: certonly .*) -d .*'
      replace: '\1 -d {{ nexus_server_name }} -d {{ aliases }}'
    when: nexus_server_alias

  - name: Enable Lets Encrypt staging mode in certbot command in the docker-compose file
    replace:
      path: "{{ nexus_docker_compose_location }}/{{ nexus_docker_compose_file_name }}"
      regexp: '(^\s*command: certonly)( --staging )?(.*)'
      replace: '\1 --staging \3'
    when: nexus_certbot_staging

  - name: Disable Lets Encrypt staging mode in certbot command in the docker-compose file
    replace:
      path: "{{ nexus_docker_compose_location }}/{{ nexus_docker_compose_file_name }}"
      regexp: '(^\s*command: certonly)( --staging )?(.*)'
      replace: '\1 \3'
    when: not nexus_certbot_staging

  - name: Create Nexus data directory {{ nexus_docker_compose_location }}/nexus-data
    file:
      path: "{{ nexus_docker_compose_location }}/nexus-data"
      state: directory
      owner: 200
      group: 200
      mode: 0755
  when: nexus_docker_compose_location|default("") != ""


- block:
  - name: Create Nginx configuration directory {{ nexus_docker_compose_location }}/nginx-conf
    file:
      path: "{{ nexus_docker_compose_location }}/nginx-conf"
      state: directory
      owner: root
      group: root
      mode: 0755

  - name: Template and copy over Nginx configuration file "{{ nexus_docker_compose_location }}/nginx.conf"
    template:
      src: "{{ nginx_conf_file }}"
      dest: "{{ nexus_docker_compose_location }}/nginx-conf/nginx.conf"
      owner: root
      group: root
      mode: 0644
  when: nexus_docker_compose_location|default("") != ""


- block:
  - name: Create Nginx dhparam directory {{ nexus_docker_compose_location }}/dhparam
    file:
      path: "{{ nexus_docker_compose_location }}/dhparam"
      state: directory
      owner: root
      group: root
      mode: 0755

  - name: Generate dhparam key 
    command: openssl dhparam -out "{{ nexus_docker_compose_location }}/dhparam/dhparam-2048.pem" 2048
    args: 
      creates: "{{ nexus_docker_compose_location }}/dhparam/dhparam-2048.pem"
  when: nexus_docker_compose_location|default("") != ""


- block:
  - name: Create Lets Encrypt directories "{{ nexus_docker_compose_location }}/{{ item }}"
    file:
      path: "{{ nexus_docker_compose_location }}/{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0755
    loop:
      - letsencrypt
      - web-root

  - name: Create dummy certificate for "{{ nexus_server_name }}"
    command: "{{ item }}"
    with_items:
      - mkdir -p "{{ nexus_docker_compose_location }}/letsencrypt/live/{{ nexus_server_name }}"
      - docker compose run --rm --entrypoint "openssl req -x509 -nodes -newkey rsa:2048 -days 1 -keyout '/etc/letsencrypt/live/{{ nexus_server_name }}/privkey.pem' -out '/etc/letsencrypt/live/{{ nexus_server_name }}/fullchain.pem' -subj '/CN=localhost'" certbot
    args: 
      chdir: "{{ nexus_docker_compose_location }}"
      creates: "{{ nexus_docker_compose_location }}/letsencrypt/live/{{ nexus_server_name }}/fullchain.pem"
  when: nexus_docker_compose_location|default("") != ""


# This block must be located before the block where Nexus service is started
- block:
  - name: Check if Nexus properties file exists
    stat:
      path: "{{ nexus_docker_compose_location }}/nexus-data/etc/nexus.properties"
    register: nexus_properties_file

  - name: Create "{{ nexus_docker_compose_location }}/nexus-data/etc" directory
    file:
      path: "{{ nexus_docker_compose_location }}/nexus-data/etc"
      state: directory
      owner: 200
      group: 200
      mode: 0755
    when: not nexus_properties_file.stat.exists

  - name: Create "{{ nexus_docker_compose_location }}/nexus-data/etc/nexus.properties" file
    file:
      path: "{{ nexus_docker_compose_location }}/nexus-data/etc/nexus.properties"
      state: touch
      owner: 200
      group: 200
      mode: 0644
    when: not nexus_properties_file.stat.exists

  - name: Enable Nexus REST API creation features
    lineinfile:
      path: "{{ nexus_docker_compose_location }}/nexus-data/etc/nexus.properties"
      regexp: '^nexus.scripts.allowCreation='
      line: nexus.scripts.allowCreation=true
  when: nexus_autoconfiguration|default("") == true


- block:
  - name: Create {{ nexus_service_location }}
    file:
      path: "{{ nexus_service_location }}"
      state: directory

  - name: Template and copy over the systemd service file
    template:
      src: "{{ nexus_service_template }}"
      dest: "{{ nexus_service_location }}/{{ nexus_service_name }}.service"
      owner: root
      group: root
      mode: 0644

  - name: Reload systemd
    systemd:
      state: restarted
      daemon_reload: yes
      enabled: yes
      name: "{{ nexus_service_name }}"
  when: (nexus_service_location|default("") != "") and (nexus_service_template|default("") != "") and (ansible_service_mgr == "systemd")


- block:
  - name: Check if Nginx is using dummy certificate
    stat:
      path: "{{ nexus_docker_compose_location }}/letsencrypt/live/{{ nexus_server_name }}/cert.pem"
    register: real_cert

  - name: Wait for Nginx startup
    wait_for:
      host: localhost
      port: 443
      state: started
      delay: 0
      timeout: 15
    when: not real_cert.stat.exists

  - name: Remove dummy certificate for "{{ nexus_server_name }}"
    command: rm -rf "{{ nexus_docker_compose_location }}/letsencrypt/live/{{ nexus_server_name }}"
    when: not real_cert.stat.exists

  - name: Wait for Certbot to obtain Lets Encrypt certificate for "{{ nexus_server_name }}"
    wait_for:
      path: "{{ nexus_docker_compose_location }}/letsencrypt/live/{{ nexus_server_name }}/cert.pem"
      timeout: 30
    when: not real_cert.stat.exists

  - name: Restart Nginx container
    command: docker compose restart nginx
    args:
      chdir: "{{ nexus_docker_compose_location }}"
    when: not real_cert.stat.exists
  when: (nexus_docker_compose_location|default("") != "") and (nexus_server_name|default("") != "")


- block:
  - name: Create Lets Encrypt certificate renewal cron job
    ansible.builtin.cron:
      name: "Renew Lets Encrypt certificate for {{ nexus_server_name }}"
      hour: "3"
      minute: "20"
      user: root
      job: "cd {{ nexus_docker_compose_location }} && docker compose run certbot renew && docker compose restart nginx"
  when: (nexus_docker_compose_location|default("") != "") and (nexus_certbot_renew_cron_hour|default("") != "") and (nexus_certbot_renew_cron_minute|default("") != "")


- block:
  - name: Wait for Nexus to come up
    uri:
      url: "https://{{ nexus_server_name }}/"
      method: GET
      validate_certs: "{{ not nexus_certbot_staging }}"
    register: _result
    until: _result.status == 200
    retries: 20  # retry X times  
    delay: 5     # pause for X sec between each try

  - name: Check if Nexus first-time password file exists
    stat:
      path: "{{ nexus_docker_compose_location }}/nexus-data/admin.password"
    register: first_time_password

  - name: Look up Nexus admin first-time password
    command: docker compose exec nexus cat /nexus-data/admin.password
    args:
      chdir: "{{ nexus_docker_compose_location }}"
    register: nexus_password_tmp
    when: first_time_password.stat.exists

  - set_fact: nexus_password="{{ nexus_password_tmp.stdout }}"
    when: first_time_password.stat.exists
  when: (nexus_docker_compose_location|default("") != "") and (nexus_server_name|default("") != "")


# This block must be located after the block where Nexus admin password is obtained
- block:
  - name: Template and copy over {{ nexus_autoconfiguration_sh_file_name }}
    template:
      src: "{{ nexus_autoconfiguration_sh_template }}"
      dest: "{{ nexus_docker_compose_location }}/{{ nexus_autoconfiguration_sh_file_name }}"
      owner: root
      group: root
      mode: 0755

  - name: Execute Nexus autoconfiguration script "{{ nexus_autoconfiguration_sh_file_name }}"
    command: "{{ nexus_docker_compose_location }}/{{ nexus_autoconfiguration_sh_file_name }}"
    args:
      chdir: "{{ nexus_docker_compose_location }}"

  - name: Disable Nexus REST API creation features
    lineinfile:
      path: "{{ nexus_docker_compose_location }}/nexus-data/etc/nexus.properties"
      regexp: '^nexus.scripts.allowCreation='
      line: nexus.scripts.allowCreation=true
      state: absent

  - name: Restart Nexus container
    command: docker compose restart nexus
    args:
      chdir: "{{ nexus_docker_compose_location }}"
  when: (nexus_autoconfiguration|default("") == true) and (first_time_password.stat.exists)


- block:
  - name: Please change Nexus admin password after first-time login
    debug:
      msg: "Nexus admin password: {{ nexus_password }}"
  when: first_time_password.stat.exists and nexus_password
